import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

// 제출전에 import 된거 없나 꼭 확인!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//삭제해야함
import java.util.Arrays;

public class BigInteger {
    public static final String QUIT_COMMAND = "quit";
    public static final String MSG_INVALID_INPUT = "입력이 잘못되었습니다.";
    public String number;
    public char[] numArr;
    public char sign;
    public int size = number.length();
    // implement this
    public static final Pattern EXPRESSION_PATTERN = Pattern.compile("");

    public BigInteger(int i) {
        String str = Integer.toString(i);
        this.number = str;
        char[] arr = new char[str.length()];
        int j = 0;

        // str을 한글자씩 배열로 옮기기
        for (int k = 0; k < str.length(); k++) {
            arr[j] = str.charAt(k);
            j++;
        }
        // numberToArr는 입력받은 숫자를 한글자씩 배열에 저장한 것
        this.numArr = arr;
        this.size = j;
    }

    public BigInteger(char[] num1) {
        String str = "";
        for (int i = 0; i < num1.length; i++) {
            str += num1[i];
        }
        this.number = str;
        char[] arr = new char[str.length()];
        int j = 0;

        // str을 한글자씩 배열로 옮기기
        for (int k = 0; k < str.length(); k++) {
            arr[j] = str.charAt(k);
            j++;
        }
        // numberToArr는 입력받은 숫자를 한글자씩 배열에 저장한 것
        this.numArr = arr;
        this.size = j;
    }

    public BigInteger(String s) {
        this.number = s;
        char[] arr = new char[s.length()];
        int j = 0;

        // 입력받은 string을 한글자씩 배열로 옮기기
        for (int i = 0; i < s.length(); i++) {
            arr[j] = s.charAt(i);
            j++;
        }

        // numberToArr는 입력받은 숫자를 한글자씩 배열에 저장한 것
        this.numArr = arr;
        this.size = j;
    }

    public BigInteger add(BigInteger big) {
        number.charAt()
        

        return new BigInteger(0);
    }

    public BigInteger subtract(BigInteger big) {
        return new BigInteger(0);
    }

    public BigInteger multiply(BigInteger big) {
        return new BigInteger(0);
    }

    @Override
    public String toString() {
        String number = "";
        for (char i : numArr) {
            number += i;
        }
        return number;
    }

    static BigInteger evaluate(String input) throws IllegalArgumentException {
        // implement here
        // parse input
        // using regex is allowed

        char firstOperator = ' ';
        char[] secondOperator = new char[2];
        char[] firstNumber = new char[101];
        char[] secondNumber = new char[101];
        char[] resultArr = new char[202];
        int cursor = 0;
        int firstCursor = 0;
        int secondCursor = 0;
        // 1. 공백제거
        input = input.replaceAll(" ", "");

        // 2. 첫번째 char가 부호인지 체크
        char first = input.charAt(0);
        if (first == '+' || first == '-') {
            firstOperator = first;
            cursor++;
        }
        int i = 0;
        // 3. 숫자, 부호, 숫자 순으로 배열에 하나씩 삽입
        while (true) {
            if (cursor >= input.length())
                break;

            char now = input.charAt(cursor);
            // now가 숫자가 아닌 경우
            if (now < 48 || now > 57) {
                secondOperator[i] = now;
                i++;
                cursor++;
            } else {
                if (i == 0) {
                    firstNumber[firstCursor] = now;
                    firstCursor++;
                    cursor++;
                } else {
                    secondNumber[secondCursor] = now;
                    secondCursor++;
                    cursor++;
                }
            }
        }
        // 출력확인용 지워!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        // System.out.println(firstOperator);
        // System.out.println(Arrays.toString(firstNumber));
        // System.out.println(firstCursor);
        // System.out.println(Arrays.toString(secondNumber));
        // System.out.println(Arrays.toString(secondOperator));

        // One possible implementation
        // BigInteger num1 = new BigInteger(arg1);
        // BigInteger num2 = new BigInteger(arg2);
        // BigInteger result = num1.add(num2);
        // return result;

        // 덧셈
        // 1. 앞이 + , 뒤가 ++ or + 2. 앞이 -, 뒤가 -+ or +- or - 3. 앞이 ' ' , 뒤가 ++ or +
        // 뺄셈

        // 곱셈 1. 뒤의 첫번째 원소가 * 인 경우

        // 임시방편 리턴값
        return new BigInteger("123");
    }

    public static void main(String[] args) throws Exception {
        try (InputStreamReader isr = new InputStreamReader(System.in)) {
            try (BufferedReader reader = new BufferedReader(isr)) {
                boolean done = false;
                while (!done) {
                    String input = reader.readLine();

                    try { // input이 quit이었으면 done = true 아니면 false
                        done = processInput(input);
                    } catch (IllegalArgumentException e) {
                        System.err.println(MSG_INVALID_INPUT);
                    }
                }
            }
        }
    }

    static boolean processInput(String input) throws IllegalArgumentException {
        boolean quit = isQuitCmd(input);

        if (quit) {
            return true;
        } else {
            BigInteger result = evaluate(input);
            System.out.println(result.toString());

            return false;
        }
    }

    static boolean isQuitCmd(String input) { // input이 quit 이면 processInput에서 종료하도록 만들어줌
        return input.equalsIgnoreCase(QUIT_COMMAND);
    }
}
